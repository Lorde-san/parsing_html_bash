#!/usr/bin/env bash

################################################################################
# Titulo    : Parsing_HTML_Bash                                                #
# Versao    : 1.1                                                              #
# Data      : 16/10/2019                                                       #
# Homepage  : https://www.desecsecurity.com                                    #
# Tested on : macOS/Linux                                                      #
################################################################################

# ==============================================================================
# Constantes
# ==============================================================================
RED='\033[31;1m'
GREEN='\033[32;1m'
BLUE='\033[34;1m'
YELLOW='\033[33;1m'
END='\033[m'

# ==============================================================================
# Verificando dependências
# ==============================================================================
[[ -e /usr/bin/wget ]] || printf "\nFaltando programa ${RED}wget${END} para funcionar.\n"
[[ -e /usr/bin/curl ]] || printf "\nFaltando programa ${RED}curl${END} para funcionar.\n"

# ==============================================================================
# Verificando argumentos
# ==============================================================================
if [[ "$1" == "" ]]; then
    echo
    echo -e "${YELLOW}################################################################################${END}"
    echo -e "${YELLOW}|->                           PARSING HTML                                   <-|${END}"
    echo -e "${YELLOW}|->                 Desec Security - Ricardo Longatto                        <-|${END}"
    echo -e "${YELLOW}|->                                                                          <-|${END}"
    echo -e "${YELLOW}|-> Exemplo: $0 www.alvo.com.br                               <-|${END}"
    echo -e "${YELLOW}################################################################################${END}"
    echo
    exit 1
fi

# ==============================================================================
# Fazendo download da página
# ==============================================================================
wget -q $1 && mv index.html $1.html

# ==============================================================================
# Filtrando links
# ==============================================================================
grep "href" $1.html | cut -d "/" -f 3 | grep "\." | cut -d '"' -f 1 | grep -v "<l" | grep -v "www." | sort -u > $1.hosts

# ==============================================================================
# Mostrando hosts encontrados
# ==============================================================================
echo
echo -e "${YELLOW}################################################################################${END}"
echo -e "${YELLOW}|->                       Buscando Hosts...                                  <-|${END}"
echo -e "${YELLOW}################################################################################${END}"
echo

# Para cada HOST encontrado, checa o status code de retorno
for i in $(cat "$1.hosts")
do
    status_code=$(curl -m 2 -o /dev/null -s -w "%{http_code}\n" $i)   # -m 2 = timeout (2 segundos)
    echo -e "$i [CODE : ${status_code}]"
done

# ==============================================================================
# Verificando Hosts ativos
# ==============================================================================
echo
echo -e "${YELLOW}################################################################################${END}"
echo -e "${YELLOW}|->                       Resolvendo Hosts...                                <-|${END}"
echo -e "${YELLOW}################################################################################${END}"
echo

for h in $(cat "$1.hosts");do host $h;done | grep "has address" > $1.ip
cat $1.ip
